devtools::use_package('abind')
devtools::use_package('KernSmooth')
devtools::use_package('gtools')
devtools::use_package('Rcpp')
devtools::use_rcpp()
devtools::load_all()
devtools::use_package('mclust')
devtools::use_package('FactoMineR')
devtools::load_all()
devtools::document()
devtools::load_all()
library(kamila)
library(kamila)
?clustOneVar
?setArgs
?kmeans
library(kamila)
?medeaWgts
devtools::document()
?medeaWgts
?kmeans
library(kamila)
devtools::document()
?kamila4
devtools::document()
?kamila4
devtools::document()
?kamila4
devtools::document()
?kamila4
devtools::document()
?kamila4
devtools::use_testthat()
setwd("~/mixedCluster/kamila_package/kamila/kamila")
devtools::test()
setArgs <- function(input, name, default) {
output <- default
nameBool <- (names(input) == name)
if (sum(nameBool) > 1) {
stop('multiple matches to name in function setArgs')
}
if (any(nameBool)) {
output <- input[[which(nameBool)]] # could replace with syntax input[[name]] but test first
}
return(output)
}
setArgs(list(a=1,b=2,c=3),'b',4)
devtools::test()
library(kamila)
devtools::test()
devtools::test()
clustOneVar <- function(vec,k,nstart,iter.max) {
nDistinctPoints <- length(unique(vec))
if (nDistinctPoints < k) {
if (nDistinctPoints == 1) {
stop('Error in clustOneVar: variables must have more than one value.')
}
#print(length(unique(vec)))
k <- nDistinctPoints
}
return(kmeans(
vec,
centers=k,
nstart=nstart,
iter.max=iter.max
)$cluster)
}
set.seed(1); clustOneVar(1:100,2,nstart=10,iter.max=20)
set.seed(1); res = clustOneVar(1:100,2,nstart=10,iter.max=20); res; table(res); res==rep(1:2,c(50,50))
set.seed(1); res = clustOneVar(1:100,2,nstart=10,iter.max=20); res; table(res); all(res==rep(1:2,c(50,50)))
set.seed(1); res = clustOneVar(1:100,1,nstart=10,iter.max=20); res; table(res); all(res==rep(1:2,c(50,50)))
set.seed(1); res = clustOneVar(1:100,10,nstart=10,iter.max=20); res; table(res); all(res==rep(1:2,c(50,50)))
set.seed(1); res = clustOneVar(1:100,10,nstart=10,iter.max=20); res; table(res); all(res==rep(c(10,5,1,2,3,9,8,6,4,7),each=10)
)
set.seed(1); res = clustOneVar(1:100,10,nstart=10,iter.max=20); res; table(res); all(res==rep(c(10,5,1,2,3,9,8,6,4,7),each=10))
devtools::test()
set.seed(2); res = clustOneVar(1:100,10,nstart=10,iter.max=20); res; table(res); all(res==rep(c(10,5,1,2,3,9,8,6,4,7),each=10))
set.seed(2); res = clustOneVar(1:100,10,nstart=10,iter.max=20); res; table(res); all(res==rep(c(7,4,1,9,10,3,2,8,6,5),each=10))
set.seed(1); res = clustOneVar(rnorm(1000),10,nstart=10,iter.max=20); res; table(res); all(res==rep(c(10,5,1,2,3,9,8,6,4,7),each=10))
set.seed(1); res = clustOneVar(sort(rnorm(1000)),10,nstart=10,iter.max=20); res; table(res); all(res==rep(c(10,5,1,2,3,9,8,6,4,7),each=10))
set.seed(1); res = clustOneVar(sort(rnorm(1000)),10,nstart=10,iter.max=20); res; table(res); all(res==rep(c(10,5,1,3,7,8,2,6,9,4),times=c(97,163,103,32,67,117,158,149,76,38)))
set.seed(1); res = clustOneVar(sort(rnorm(1000)),10,nstart=10,iter.max=20); res; table(res); all(res==rep(c(10,5,1,3,7,8,2,6,9,4),times=c(38,67,97,103,158,149,163,117,76,32)))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?tryCatch
res = tryCatch(1+1,error=function(e)e, warning(w)w)
res = tryCatch(1+1,error=function(e) e, warning(w) w)
res = tryCatch(1+1)
res = tryCatch(1+1,error=function(e)e)
res = tryCatch(1+1,error=function(e)e,warning=function(w)w)
res = tryCatch(stop('sdf'),error=function(e)e,warning=function(w)w)
res
res = tryCatch(stop('sdf'),error=function(e)e,warning=function(w)w); res
res = tryCatch(warning('werwer'),error=function(e)e,warning=function(w)w); res
res = tryCatch(kmeans(rnorm(10^3),20,nstart=1,iter.max=2),error=function(e)e,warning=function(w)w); res
res = tryCatch(kmeans(rnorm(10^3),20,nstart=1,iter.max=2),error=function(e)e,warning=function(w,obj)list(obj,w)); res
res = tryCatch(kmeans(rnorm(10^3),20,nstart=1,iter.max=2),error=function(e)e,warning=function(w)w); res
(kmeans(rnorm(10^3),20,nstart=1,iter.max=2))
res <- kmeans(rnorm(10^3),20,nstart=1,iter.max=2)
rm(res)
res
res <- suppressWarnings(kmeans(rnorm(10^3),20,nstart=1,iter.max=2))
str(res)
devtools::test()
devtools::use_package('mclust')
devtools::use_package('mclust')
library(kamila)
